- name: Configure bastions
  hosts: all_bastions
  become: yes
  vars:
    proxy_env:
      HTTP_PROXY: "http://192.168.16.162:80"
      HTTPS_PROXY: "http://192.168.16.162:80"
      NO_PROXY: "10.0.0.0/8,localhost,127.0.0.1,.oraclecloud.com,.ocir.io"

  tasks:
    - name: Ensure proxy variables are present in .bashrc
      lineinfile:
        path: /home/opc/.bashrc
        regexp: '^export {{ item.key }}='
        line: 'export {{ item.key }}={{ item.value }}'
        state: present
      with_dict: "{{ proxy_env }}"
      become: yes
      become_user: opc
   
    - name: Update all packages
      environment: "{{ proxy_env }}"
      yum:
        name: '*'
        state: latest

    - name: Enable Oracle Linux developer repo
      become: true
      dnf:
        name: oraclelinux-developer-release-el8
        state: present

    - name: Install OCI CLI
      become: true
      dnf:
       name: python36-oci-cli
       state: present

    - name: Ensure OCI config directory exists
      become: yes
      become_user: opc
      file:
        path: "/home/opc/.oci"
        state: directory
        mode: '0700'

    - name: Write OCI config
      become: yes
      become_user: opc
      copy:
        dest: "/home/opc/.oci/config"
        content: "{{ oci_fingerprint_b64 | b64decode }}"
        mode: '0600'

    - name: Write OCI private key
      become: yes
      become_user: opc
      copy:
        dest: "/home/opc/.oci/oci_api_key.pem"
        content: "{{ oci_private_key_b64 | b64decode }}"
        mode: '0600'

    - name: Show config (debug only)
      become: yes
      become_user: opc
      command: cat "/home/opc/.oci/config"
      register: oci_config
      changed_when: false

    - debug:
        var: oci_config.stdout

    - name: Grow filesystem if not already expanded
      become: yes
      command: /usr/libexec/oci-growfs -y
      args:
        creates: /var/lib/oci-growfs-done
      register: growfs_result

    - name: Mark growfs done
      become: yes
      file:
        path: /var/lib/oci-growfs-done
        state: touch
      when: growfs_result.changed

    - name: Check if Falcon Sensor is already installed
      stat:
        path: /opt/CrowdStrike/falconctl
      register: falconctl_check

    - name: Copy Falcon Sensor installation script
      copy:
        dest: /tmp/install_falcon.sh
        mode: '0755'
        content: |
          #!/bin/bash
          set -euo pipefail
          IFS=$'\n\t'
          readonly PAR_URL="https://objectstorage.us-ashburn-1.oraclecloud.com/p/ClQ-CBkNs1vHgJtCrzenAbxjjMMddVQJT6VDaPOZGWaUwenVvRJYe3CivYfShHfL/n/idv5itwbfamt/b/falcon-sensor-installers/o/"
          readonly SENSOR_NAME_TEMPLATE='falcon-sensor-7.24.0-17706.elOS_VERSION.ARCH.rpm'
          readonly OCI_CID='4D431622DC594EC69ED15C9B27AC6527-2A'
          readonly GIU_CID='35E4948D55324A60A8AA2F4D39AB617E-04'
          readonly FA_CID='6faddccee424429994616e8642e8213c'
          readonly SAAS_CID='8400463988F447AFBCAA0D9C09097E6A-82'
          cid_to_use=${CID:-$GIU_CID}
          TMP_RPM=""
          cleanup() { if [[ -n "${TMP_RPM:-}" && -f "$TMP_RPM" ]]; then rm -f "$TMP_RPM" || true; fi; }
          trap cleanup EXIT
          command_exists() { command -v "$1" >/dev/null 2>&1; }
          object_get() { local url=$1; local path=$2; printf 'Fetching %s -> %s\n' "$url" "$path"; curl --fail --show-error --location --silent "$url" -o "$path"; }
          fetch_and_load() {
            local arch=$1
            if [[ ! -f "/etc/oracle-release" ]]; then
              printf "Falcon sensor can only be installed on Oracle Linux!\n" >&2
              exit 1
            fi
            local osver
            osver=$(grep -oE '[0-9]+' /etc/oracle-release | head -n1 || true)
            if [[ -z "$osver" ]]; then
              printf "Unable to determine Oracle Linux version from /etc/oracle-release\n" >&2
              exit 1
            fi
            local sensor_name
            sensor_name=${SENSOR_NAME_TEMPLATE/ARCH/$arch}
            sensor_name=${sensor_name/OS_VERSION/$osver}
            local full_url="${PAR_URL}${sensor_name}"
            TMP_RPM=$(mktemp -u /tmp/falcon-sensor.XXXXXX.rpm)
            object_get "$full_url" "$TMP_RPM"
            if ! sudo yum install -y "$TMP_RPM"; then
              printf "falcon sensor install failed\n" >&2
              exit 1
            fi
            printf "Sensor installed, removing tmp RPM\n"
            rm -f "$TMP_RPM" || true
            activate_and_validate
          }
          activate_and_validate() {
            if ! sudo /opt/CrowdStrike/falconctl -s --cid="$cid_to_use" -f; then
              printf "falcon sensor CID enablement failed\n" >&2
              exit 1
            fi
            printf "Sensor CID enabled, configuring proxy and restarting sensor\n"
            sudo /opt/CrowdStrike/falconctl -s --apd=false || true
            sudo /opt/CrowdStrike/falconctl -s --aph=192.168.16.162 || true
            sudo /opt/CrowdStrike/falconctl -s --app=80 || true
            sudo systemctl restart falcon-sensor
            sleep 5
            if ! systemctl is-active --quiet falcon-sensor; then
              printf "falcon sensor state validation failed\n" >&2
              sudo journalctl -u falcon-sensor --no-pager -n 50 || true
              exit 1
            fi
            printf "Falcon Sensor successfully installed!\n"
          }
          if [[ -f "/etc/oracle-release" ]]; then
            printf "Running on OS version: %s\n" "$(cat /etc/oracle-release)"
          else
            printf "Falcon sensor can only be installed on Oracle Linux!\n" >&2
            exit 1
          fi
          case "$(uname -m)" in
            x86_64) fetch_and_load x86_64 ;;
            aarch64) fetch_and_load aarch64 ;;
            *) printf "Unsupported architecture: %s\n" "$(uname -m)" >&2; exit 1 ;;
          esac
          sleep 15
          sudo /opt/CrowdStrike/falconctl -g --version || true
          systemctl status falcon-sensor || true

    - name: Run Falcon Sensor installer if not already installed
      shell: /tmp/install_falcon.sh
      args:
        executable: /bin/bash
      when: not falconctl_check.stat.exists
      register: falcon_output

    - name: Show Falcon installation output
      when: falcon_output is defined
      debug:
        var: falcon_output.stdout


- name: Setup Base Bastions
  hosts: base
  become: yes
  vars:
    proxy_env:
      HTTP_PROXY: "http://192.168.16.162:80"
      HTTPS_PROXY: "http://192.168.16.162:80"
      NO_PROXY: "10.111.0.0/16,localhost,127.0.0.1,.oraclecloud.com,.ocir.io"
  tasks:

    - name: Ensure required packages are installed (git, curl)
      environment: "{{ proxy_env }}"
      package:
        name:
          - git
          - curl
        state: present

    - name: Download Helm install script
      environment: "{{ proxy_env }}"
      get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get_helm.sh
        mode: '0700'
    - name: Run Helm install script into /usr/bin
      environment: "{{ proxy_env | combine({'USE_SUDO': 'true', 'HELM_INSTALL_DIR': '/usr/bin'}) }}"
      command: /tmp/get_helm.sh
      args:
        creates: /usr/bin/helm

    - name: Verify helm version
      environment: "{{ proxy_env }}"
      command: helm version --short
      register: helm_version
      changed_when: false

    - debug:
        msg: "Installed Helm version: {{ helm_version.stdout }}"

    - name: Install kubectl
      environment: "{{ proxy_env }}"
      get_url:
        url: https://dl.k8s.io/release/v1.33.1/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        mode: '0755'
        
    - name: Install kubernetes Python package for opc user
      pip:
        name: kubernetes
        executable: pip3
        extra_args: --user
      become: false  
      become_user: opc

    - name: Ensure .kube directory exists
      become: yes
      become_user: opc
      file:
        path: /home/opc/.kube
        state: directory
        mode: '0700'

    - name: Generate kubeconfig from OCI OKE
      become: yes
      become_user: opc
      command: >
        oci ce cluster create-kubeconfig
        --cluster-id {{ oke_cluster_ocid }}
        --file /home/opc/.kube/config
        --region us-ashburn-1
        --token-version 2.0.0
        --overwrite
      environment:
        OCI_CLI_PROFILE: DEFAULT

    - name: Set kubeconfig permissions
      become: yes
      become_user: opc
      file:
        path: /home/opc/.kube/config
        mode: '0600'

    - name: Test Kubernetes connectivity by listing namespaces
      become: yes
      become_user: opc
      command: kubectl get ns
      environment:
        KUBECONFIG: /home/opc/.kube/config
      register: kube_ns

    - name: Show namespaces
      debug:
        var: kube_ns.stdout

    # - name: Comment out proxy variables in .bashrc
    #   lineinfile:
    #     path: /home/opc/.bashrc
    #     regexp: '^export {{ item.key }}='
    #     line: '# export {{ item.key }}={{ item.value }}'
    #     state: present
    #   with_dict: "{{ proxy_env }}"
    #   become: yes
    #   become_user: opc



- name: Setup ODI and OAP Bastions
  hosts: odi,oap,base
  become: yes
  vars:
    proxy_env:
      HTTP_PROXY: "http://192.168.16.162:80"
      HTTPS_PROXY: "http://192.168.16.162:80"
      NO_PROXY: "10.111.0.0/16,localhost,127.0.0.1,.oraclecloud.com,.ocir.io"
  tasks:

    - name: Install GUI group
      ansible.builtin.dnf:
        name: "@Server with GUI"
        state: present

    - name: Set graphical target as default
      ansible.builtin.command:
        cmd: systemctl set-default graphical
      args:
        creates: /etc/systemd/system/default.target.wants/graphical.target


    - name: Install VNC server packages
      ansible.builtin.dnf:
        name:
          - tigervnc-server
          - tigervnc-server-module
        state: present

    - name: Set VNC password for user
      ansible.builtin.expect:
        command: vncpasswd
        responses:
          "Password:": "{{ vnc_password }}"
          "Verify:": "{{ vnc_password }}"
          'Would you like to enter a view-only password (y/n)?': "n"
      become: false

    - name: Configure vncserver.users
      ansible.builtin.lineinfile:
        path: /etc/tigervnc/vncserver.users
        line: ":1={{ ansible_user }}"
        create: yes

    - name: Configure VNC defaults
      ansible.builtin.blockinfile:
        path: /etc/tigervnc/vncserver-config-defaults
        block: |
          session=gnome
          geometry=1280x1024
        create: yes

    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable and start VNC service
      ansible.builtin.systemd:
        name: vncserver@:1.service
        enabled: yes
        state: started

    - name: Disable GNOME idle sleep
      ansible.builtin.command:
        cmd: gsettings set org.gnome.desktop.session idle-delay 0
      become_user: "{{ ansible_user }}"

    - name: Disable and stop firewall
      service:
        name: firewalld
        state: stopped
        enabled: no

    - name: Reboot the system
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible after VNC setup"
        connect_timeout: 300
        reboot_timeout: 600
